<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="K-ZH?#0_PUeF20:C|HA,">counter</variable></variables><block type="pxt-on-start" id="%Nk5z^Wp/0xQ?/UrKt_[" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="YdHOzArrkrlt1xHhc;GW" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let counter = 0" numlines="1" declaredvars="counter"></mutation><next><block type="typescript_statement" id="ulVkz6jvm*HN|VCWjBN;" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class TM1650Display {" line1="    public displayDigits: number[] = [0, 0, 0, 0]" line2="    constructor(clock: DigitalPin = DigitalPin.P1, data: DigitalPin = DigitalPin.P0) {" line3="        this.clockpin = clock" line4="        this.datapin = data" line5="        pins.setPull(clock, PinPullMode.PullUp)" line6="        pins.setPull(data, PinPullMode.PullUp)" line7="        this.goidle()" line8="    }" line9="    public displayOn(brightness: number = 0) {" line10="        brightness &amp;= 7" line11="        brightness &lt;&lt;= 4" line12="        brightness |= 1" line13="        this.sendpair(0x48, brightness)" line14="    }" line15="    public displayOff() {" line16="        this.sendpair(0x48, 0)" line17="    }" line18="    public displayClear() {" line19="        this.sendpair(this.digaddress[0], 0)" line20="        this.sendpair(this.digaddress[1], 0)" line21="        this.sendpair(this.digaddress[2], 0)" line22="        this.sendpair(this.digaddress[3], 0)" line23="        this.displayDigits[0] = 0" line24="        this.displayDigits[1] = 0" line25="        this.displayDigits[2] = 0" line26="        this.displayDigits[3] = 0" line27="    }" line28="    public showChar(pos: number = 0, c: number = 0) {" line29="        let charindex = 30" line30="        pos &amp;= 3" line31="        charindex = this.chartoindex(c)" line32="        if (c == 0x2E) {" line33="            this.displayDigits[pos] |= 128" line34="        } else {" line35="            this.displayDigits[pos] = this.chargen[charindex]" line36="        }" line37="        this.sendpair(this.digaddress[pos], this.displayDigits[pos])" line38="    }" line39="    public showCharWithPoint(pos: number = 0, c: number = 0) {" line40="        let charindex2 = 30" line41="        pos &amp;= 3" line42="        charindex2 = this.chartoindex(c)" line43="        this.displayDigits[pos] = this.chargen[charindex2] | 128" line44="        this.sendpair(this.digaddress[pos], this.displayDigits[pos])" line45="    }" line46="    public showString(s: string) {" line47="        let outc: number[] = []" line48="        let dp: number[] = [0, 0, 0, 0]" line49="        let c = 0" line50="        let index = 0" line51="        let di = 0" line52="" line53="        for (index = 0, di = 0; (index &lt; s.length) &amp;&amp; (di &lt; 4); index++) {" line54="            c = s.charCodeAt(index)" line55="            if (c == 0x2E) {" line56="                if (di == 0) {" line57="                    outc[di] = 32" line58="                    dp[di] = 1" line59="                    di++" line60="                } else {" line61="                    if (dp[di - 1] == 0) {" line62="                        dp[di - 1] = 1" line63="                    } else {" line64="                        dp[di] = 1" line65="                        di++" line66="                        outc[di] = 32" line67="                    }" line68="                }" line69="            } else {" line70="                outc[di] = c" line71="                di++" line72="            }" line73="        }" line74="        for (index = 0; index &lt; di; index++) {" line75="            c = outc[index]" line76="            if (dp[index] == 0) {" line77="                this.showChar(index, c)" line78="            }" line79="            else {" line80="                this.showCharWithPoint(index, c)" line81="            }" line82="        }" line83="    }" line84="    public showInteger(n: number = 0) {" line85="        let outc2: number[] = [32, 32, 32, 32]" line86="        let i = 3" line87="        let absn = 0" line88="" line89="        if ((n &gt; 9999) || (n &lt; -999)) {" line90="            this.showString(&quot;Err &quot;)" line91="        } else {" line92="            absn = Math.abs(n)" line93="            if (absn == 0) {" line94="                outc2[3] = 0x30" line95="            } else {" line96="                while (absn != 0) {" line97="                    outc2[i] = (absn % 10) + 0x30" line98="                    absn = Math.floor(absn / 10)" line99="                    i = i - 1" line100="                }" line101="                if (n &lt; 0) {" line102="                    outc2[i] = 0x2D" line103="                }" line104="            }" line105="            for (i = 0; i &lt; 4; i++) {" line106="                this.showChar(i, outc2[i])" line107="            }" line108="        }" line109="    }" line110="    public showHex(n: number = 0) {" line111="        let outc3: number[] = [32, 32, 32, 32]" line112="        let j = 3" line113="        let d = 0" line114="        let absn2 = 0" line115="" line116="        if ((n &gt; 0xFFFF) || (n &lt; -32768)) {" line117="            this.showString(&quot;Err &quot;)" line118="        } else {" line119="            if (n &lt; 0) {" line120="                n = 0x10000 + n" line121="            }" line122="            if (n == 0) {" line123="                outc3[3] = 0x30" line124="            } else {" line125="                while (n != 0) {" line126="                    d = (n % 16)" line127="                    if (d &lt; 10) {" line128="                        d += 0x30" line129="                    } else {" line130="                        d += 55" line131="                    }" line132="                    outc3[j] = d" line133="                    n = Math.floor(n / 16)" line134="                    j = j - 1" line135="                }" line136="            }" line137="            for (j = 0; j &lt; 4; j++) {" line138="                this.showChar(j, outc3[j])" line139="            }" line140="        }" line141="    }" line142="    public showDecimal(n: number = 0) {" line143="        let s: string = &quot;&quot;" line144="        let targetlen = 4" line145="" line146="        if ((n &gt; 9999) || (Math.abs(n) &lt; 0.001) || (n &lt; -999)) {" line147="            this.showString(&quot;Err &quot;)" line148="        } else {" line149="            s = n.toString()" line150="            if (s.includes(&quot;.&quot;)) {" line151="                targetlen = 5" line152="            }" line153="            while (s.length &lt; targetlen) {" line154="                s = &quot; &quot; + s" line155="            }" line156="            this.showString(s)" line157="        }" line158="    }" line159="    public toggleDP(pos: number = 0) {" line160="        this.displayDigits[pos] ^= 128" line161="        this.sendpair(this.digaddress[pos], this.displayDigits[pos])" line162="    }" line163="" line164="    private clockpin: DigitalPin" line165="    private datapin: DigitalPin" line166="    private chargen: number[] = [" line167="        0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F,  /* 0 - 9 */" line168="        0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x3D, 0x76, 0x06, 0x0E,  /* A - J */" line169="        0x38, 0x54, 0x74, 0x73, 0x67, 0x50, 0x78, 0x1C, 0x40, 0x63,  /* LnoPQrtu-* (degree) */" line170="        0x00]" line171="    private digaddress: number[] = [0x68, 0x6A, 0x6C, 0x6E]" line172="    private chartoindex(c: number) {" line173="        let charcode = 30" line174="        if (c &lt; 30) {" line175="            charcode = c" line176="        } else {" line177="            if ((c &gt; 0x2F) &amp;&amp; (c &lt; 0x3A)) {" line178="                charcode = c - 0x30" line179="            } else {" line180="                if (c &gt; 0x40) {" line181="                    c &amp;= 0xDF    /* uppercase */" line182="                }" line183="                if ((c &gt; 0x40) &amp;&amp; (c &lt; 0x4B)) {" line184="                    charcode = c - 0x37" line185="                } else {" line186="                    if (c == 0x4C) {" line187="                        charcode = 20" line188="                    }" line189="                    if ((c &gt;= 0x4E) &amp;&amp; (c &lt;= 0x52)) {" line190="                        charcode = 21 + (c - 0x4E)" line191="                    }" line192="                    if (c == 0x54) {" line193="                        charcode = 26" line194="                    }" line195="                    if (c == 0x55) {" line196="                        charcode = 27" line197="                    }" line198="                    if (c == 0x2D) {" line199="                        charcode = 28" line200="                    }" line201="                    if (c == 0x2A) {" line202="                        charcode = 29" line203="                    }" line204="                }" line205="            }" line206="        }" line207="        return (charcode)" line208="    }" line209="    private sendpair(byte1: number, byte2: number) {" line210="        this.sendstart()" line211="        this.sendbyte(byte1)" line212="        this.sendbyte(byte2)" line213="        this.goidle()" line214="    }" line215="    private sendstart() {" line216="        /* Clock and data both start at 1 */" line217="        pins.digitalWritePin(this.datapin, 0)" line218="        control.waitMicros(250)" line219="        pins.digitalWritePin(this.clockpin, 0)" line220="        control.waitMicros(50)" line221="    }" line222="    private goidle() {" line223="        pins.digitalWritePin(this.clockpin, 1)" line224="        control.waitMicros(250)" line225="        pins.digitalWritePin(this.datapin, 1)" line226="        control.waitMicros(250)" line227="    }" line228="    private sendbyte(byte: number) {" line229="        /* Resting is both clock and data HIGH. */" line230="        /* In here, clock will start and end LOW, SDA unknown */" line231="        /* data are clocked out MSB first, 8 bits and then an incoming ACK bit */" line232="        let bitmask = 128" line233="        let ackbit = 0" line234="" line235="        while (bitmask != 0) {" line236="            control.waitMicros(150)" line237="            if ((byte &amp; bitmask) == 0) {" line238="                pins.digitalWritePin(this.datapin, 0)" line239="            } else {" line240="                pins.digitalWritePin(this.datapin, 1)" line241="            }" line242="            control.waitMicros(100)" line243="            pins.digitalWritePin(this.clockpin, 1)" line244="            control.waitMicros(250)" line245="            pins.digitalWritePin(this.clockpin, 0)" line246="            bitmask &gt;&gt;= 1" line247="        }" line248="        /* Clock is now low and we want the ACK bit so this time read SDA */" line249="        /* SDA is unknown, give a brief delay then drop data to zero */" line250="        control.waitMicros(25)" line251="        pins.digitalWritePin(this.datapin, 0)" line252="        control.waitMicros(250)" line253="        /* Do one clock */" line254="        pins.digitalWritePin(this.clockpin, 1)" line255="        control.waitMicros(250)" line256="        pins.digitalWritePin(this.clockpin, 0)" line257="        /* Display takes 120+ microseconds to send ack */" line258="        control.waitMicros(150)" line259="        ackbit = pins.digitalReadPin(this.datapin)" line260="        pins.digitalWritePin(this.datapin, 0)" line261="        control.waitMicros(100)" line262="    }" line263="}" numlines="264"></mutation><next><block type="typescript_statement" id="kbhg@g|O[K[X791p@A/;" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let display: TM1650Display = new TM1650Display(DigitalPin.P1, DigitalPin.P0)" numlines="1" declaredvars="display"></mutation><next><block type="typescript_statement" id="?%hGwR?A#uf-Z#rq})t2" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="display.displayOn(5)" numlines="1"></mutation><next><block type="typescript_statement" id="`GRKv_vWEqtN^:%v[Rm2" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="display.showHex(0xCAFE)" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></statement></block><block type="device_forever" id="L$9]p(@pRji_i]9(88XV" x="924" y="20"><statement name="HANDLER"><block type="device_pause" id="G}y,UFrpoWL|g?X%D3F."><value name="pause"><shadow type="timePicker" id="A;7-_B83RXo:WA8h*N8k"><field name="ms">200</field></shadow></value><next><block type="device_show_leds" id="LeDfp1K4n;/OUi`;!gT="><field name="LEDS">`
        . . . . . 
        . . . . . 
        . . # . . 
        . . . . . 
        . . . . .
        `</field><next><block type="typescript_statement" id="q_B*29O7Z[5?p]B3ir.b" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="display.showInteger(counter)" numlines="1"></mutation><next><block type="variables_change" id="l}YuoJxOM}zTi;7MA_Ww"><field name="VAR" id="K-ZH?#0_PUeF20:C|HA,">counter</field><value name="VALUE"><shadow type="math_number" id=".6ycQfU61b:aZrvQO#Si"><field name="NUM">1</field></shadow></value><next><block type="controls_if" id="9@3C[fs@,R%f3Us}4BkH"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="=o~XTffs:khiIV^.$R.h"><field name="OP">GT</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="(mYIf$F)Er_MaBN,Q,DX"><field name="VAR" id="K-ZH?#0_PUeF20:C|HA,">counter</field></block></value><value name="B"><shadow type="math_number" id="ak2/_nj$sHh2L#PXC7h1"><field name="NUM">9999</field></shadow></value></block></value><statement name="DO0"><block type="variables_set" id="WL[`*yhhCW,lZ=*q~:J^"><field name="VAR" id="K-ZH?#0_PUeF20:C|HA,">counter</field><value name="VALUE"><shadow type="math_number" id="8XZ(+#[F|.^5_%@tt/y2"><field name="NUM">0</field></shadow></value></block></statement><next><block type="device_pause" id="[ZwEZ{Ry^F?dyWH9_7jl"><value name="pause"><shadow type="timePicker" id="Vihw*_0Jrvtga;SUy}gp"><field name="ms">200</field></shadow></value><next><block type="device_show_leds" id="qx+^,Ifbi;SeD]D0b/HW"><field name="LEDS">`
        . . . . . 
        . . # . . 
        . # # # . 
        . . # . . 
        . . . . .
        `</field><next><block type="typescript_statement" id="*9*Av0:0Y`9o_~%18Z^*" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="display.showInteger(counter)" numlines="1"></mutation><next><block type="variables_change" id="D4WIr}AcJsIz4-ut4VE%"><field name="VAR" id="K-ZH?#0_PUeF20:C|HA,">counter</field><value name="VALUE"><shadow type="math_number" id="m;tqjijry|L}:B$ZN8n8"><field name="NUM">1</field></shadow></value><next><block type="controls_if" id="+UN|q^%?#t|]k`,me1Q_"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="HTKc1]|rM@fA-{|}7#A,"><field name="OP">GT</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="aEyc~Q[Z!T#]Zb}-kr_6"><field name="VAR" id="K-ZH?#0_PUeF20:C|HA,">counter</field></block></value><value name="B"><shadow type="math_number" id="OmW.+i%hujA;)svNH0ZV"><field name="NUM">9999</field></shadow></value></block></value><statement name="DO0"><block type="variables_set" id="=c?pWx1E*?-d((ogT6~w"><field name="VAR" id="K-ZH?#0_PUeF20:C|HA,">counter</field><value name="VALUE"><shadow type="math_number" id="w.+K8j*^MlD6-g?^vVxQ"><field name="NUM">0</field></shadow></value></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_forever" id="4CkU6l,2u3/iM2=FlD97" x="1356" y="20"></block></xml>